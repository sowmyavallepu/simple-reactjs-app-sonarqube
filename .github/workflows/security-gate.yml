name: Security Gate - Zero Tolerance Policy

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  gate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.x
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Tools used below (add/remove as you like)
          pip install pytest pytest-cov codespell bandit safety

      - name: Spell check
        run: |
          # Fail on any spelling issues under src/ and docs/
          codespell src docs --ignore-words-list=teh,thru

      - name: Run unit tests with 95% coverage requirement
        run: |
          pytest --maxfail=1 --disable-warnings -q \
            --cov=src --cov-report=xml
          # Enforce threshold (fail build if below 95%)
          python - <<'PY'
import sys, xml.etree.ElementTree as ET
root = ET.parse("coverage.xml").getroot()
rate = float(root.get('line-rate', 0)) * 100
print(f"Line coverage: {rate:.1f}%")
sys.exit(0 if rate >= 95.0 else 1)
PY

      - name: Zero tolerance security scan (Bandit)
        run: |
          # High severity or medium issues fail the build
          bandit -r src -x tests -ll -iii

      - name: Dependency vulnerability scan (Safety)
        run: |
          # Fails on known vulns in installed packages
          safety check --full-report --fail-on HIGH

      # -------- SonarQube (self-hosted or SonarCloud) ----------
      # Option A: Self-hosted SonarQube
      - name: SonarQube Scan
        if: ${{ env.SONAR_HOST_URL }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          pip install sonar-scanner-cli
          sonar-scanner \
            -Dsonar.projectKey=${{ github.repository }} \
            -Dsonar.sources=src \
            -Dsonar.python.coverage.reportPaths=coverage.xml \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${SONAR_TOKEN}

      # Option B: SonarCloud (uncomment if you use SonarCloud)
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@v2
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     args: >
      #       -Dsonar.projectKey=your_org_your_project
      #       -Dsonar.organization=your_org
      #       -Dsonar.python.coverage.reportPaths=coverage.xml

      # Post-run cleanup of actions/checkout happens automatically.
