name: CI • Test • Security • Sonar • Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_test_scan_deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write          # needed to commit the refreshed lockfile
      pull-requests: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Create/commit a fresh lockfile that matches package.json
      - name: Clean & npm install (write new lockfile)
        run: |
          rm -f package-lock.json
          npm install

      - name: Commit updated lockfile
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          if [ -n "$(git status --porcelain package-lock.json)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add package-lock.json
            git commit -m "chore(ci): regenerate package-lock.json"
            git push
          fi

      # ---------- Security gate on production deps only ----------
      - name: Install prod deps only
        run: npm ci --omit=dev

      - name: npm audit (prod only, high+)
        run: npm audit --omit=dev --audit-level=high

      # ---------- Reinstall all deps for tests/build ----------
      - name: Clean node_modules
        run: rm -rf node_modules

      - name: Install all deps
        run: npm ci

      # ---------- Run tests and generate coverage ----------
      - name: Test (Jest) – produce coverage
        run: npm test -- --coverage --watchAll=false

      # ---------- Enforce 95% line coverage without CRA overrides ----------
      - name: Enforce 95% line coverage
        run: |
          node - <<'NODE'
          const fs = require('fs');
          function readJSON(p) { return JSON.parse(fs.readFileSync(p, 'utf8')); }
          let pct = 0;
          try {
            if (fs.existsSync('./coverage/coverage-summary.json')) {
              pct = readJSON('./coverage/coverage-summary.json').total.lines.pct;
            } else if (fs.existsSync('./coverage/coverage-final.json')) {
              const data = readJSON('./coverage/coverage-final.json');
              let covered = 0, total = 0;
              for (const f of Object.values(data)) {
                if (f.lines) { covered += f.lines.covered; total += f.lines.total; }
              }
              pct = total ? (covered / total * 100) : 0;
            } else {
              console.error('Coverage files not found. Did tests run with --coverage?');
              process.exit(1);
            }
            console.log('Line coverage:', pct.toFixed(2) + '%');
            if (pct < 95) { console.error('❌ Coverage below 95%'); process.exit(1); }
            console.log('✅ Coverage requirement met');
          } catch (e) {
            console.error('Failed to read/parse coverage files:', e.message);
            process.exit(1);
          }
          NODE

      # --- SonarQube scan (self-hosted) ---
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        timeout-minutes: 10
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Build React app
        run: npm run build

      - name: Deploy to Azure Functions
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
          package: ./build
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
